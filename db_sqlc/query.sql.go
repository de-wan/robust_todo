// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db_sqlc

import (
	"context"
	"database/sql"
)

const addTodo = `-- name: AddTodo :exec
INSERT INTO todo (uuid, value)
    VALUES (?, ?)
`

type AddTodoParams struct {
	Uuid  string
	Value string
}

func (q *Queries) AddTodo(ctx context.Context, arg AddTodoParams) error {
	_, err := q.db.ExecContext(ctx, addTodo, arg.Uuid, arg.Value)
	return err
}

const archiveTodo = `-- name: ArchiveTodo :exec
UPDATE todo SET archived_at = NOW() WHERE uuid = ?
`

func (q *Queries) ArchiveTodo(ctx context.Context, uuid string) error {
	_, err := q.db.ExecContext(ctx, archiveTodo, uuid)
	return err
}

const editTodo = `-- name: EditTodo :exec
UPDATE todo SET value = ? WHERE uuid = ?
`

type EditTodoParams struct {
	Value string
	Uuid  string
}

func (q *Queries) EditTodo(ctx context.Context, arg EditTodoParams) error {
	_, err := q.db.ExecContext(ctx, editTodo, arg.Value, arg.Uuid)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT uuid, value, done_at FROM todo WHERE uuid = ?
`

type GetTodoRow struct {
	Uuid   string
	Value  string
	DoneAt sql.NullTime
}

func (q *Queries) GetTodo(ctx context.Context, uuid string) (GetTodoRow, error) {
	row := q.db.QueryRowContext(ctx, getTodo, uuid)
	var i GetTodoRow
	err := row.Scan(&i.Uuid, &i.Value, &i.DoneAt)
	return i, err
}

const listArchivedTodos = `-- name: ListArchivedTodos :many
SELECT uuid, value, done_at
    FROM todo
    WHERE archived_at IS NOT NULL
    ORDER BY created_at DESC
`

type ListArchivedTodosRow struct {
	Uuid   string
	Value  string
	DoneAt sql.NullTime
}

func (q *Queries) ListArchivedTodos(ctx context.Context) ([]ListArchivedTodosRow, error) {
	rows, err := q.db.QueryContext(ctx, listArchivedTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListArchivedTodosRow
	for rows.Next() {
		var i ListArchivedTodosRow
		if err := rows.Scan(&i.Uuid, &i.Value, &i.DoneAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTodos = `-- name: ListTodos :many
SELECT uuid, value, done_at
    FROM todo
    WHERE archived_at IS NULL
    ORDER BY created_at DESC
`

type ListTodosRow struct {
	Uuid   string
	Value  string
	DoneAt sql.NullTime
}

func (q *Queries) ListTodos(ctx context.Context) ([]ListTodosRow, error) {
	rows, err := q.db.QueryContext(ctx, listTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTodosRow
	for rows.Next() {
		var i ListTodosRow
		if err := rows.Scan(&i.Uuid, &i.Value, &i.DoneAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toggleTodo = `-- name: ToggleTodo :exec
UPDATE todo SET
    done_at =
        CASE WHEN done_at IS NULL
            THEN NOW()
            ELSE NULL
        END
WHERE uuid = ?
`

func (q *Queries) ToggleTodo(ctx context.Context, uuid string) error {
	_, err := q.db.ExecContext(ctx, toggleTodo, uuid)
	return err
}
