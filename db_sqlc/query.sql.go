// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db_sqlc

import (
	"context"
	"database/sql"
	"time"
)

const addTodo = `-- name: AddTodo :exec
INSERT INTO todo (uuid, value)
    VALUES (?, ?)
`

type AddTodoParams struct {
	Uuid  string
	Value string
}

func (q *Queries) AddTodo(ctx context.Context, arg AddTodoParams) error {
	_, err := q.db.ExecContext(ctx, addTodo, arg.Uuid, arg.Value)
	return err
}

const listTodos = `-- name: ListTodos :many
SELECT uuid, value, deadline, done_at, created_at
    FROM todo
    ORDER BY created_at DESC
`

type ListTodosRow struct {
	Uuid      string
	Value     string
	Deadline  sql.NullTime
	DoneAt    sql.NullTime
	CreatedAt time.Time
}

func (q *Queries) ListTodos(ctx context.Context) ([]ListTodosRow, error) {
	rows, err := q.db.QueryContext(ctx, listTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTodosRow
	for rows.Next() {
		var i ListTodosRow
		if err := rows.Scan(
			&i.Uuid,
			&i.Value,
			&i.Deadline,
			&i.DoneAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
